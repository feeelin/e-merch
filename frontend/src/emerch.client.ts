//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

import axios, { AxiosError, AxiosInstance, AxiosRequestConfig, AxiosResponse, CancelToken } from 'axios';

export class EmerchApiClient {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance ? instance : axios.create();

        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";

    }

    /**
     * @return Success
     */
    customerGET(  cancelToken?: CancelToken | undefined): Promise<CustomerListResponse> {
        let url_ = this.baseUrl + "/api/Customer";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processCustomerGET(_response);
        });
    }

    protected processCustomerGET(response: AxiosResponse): Promise<CustomerListResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CustomerListResponse.fromJS(resultData200);
            return Promise.resolve<CustomerListResponse>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CustomerListResponse>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    customerPOST(body: Customer | undefined , cancelToken?: CancelToken | undefined): Promise<Customer> {
        let url_ = this.baseUrl + "/api/Customer";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processCustomerPOST(_response);
        });
    }

    protected processCustomerPOST(response: AxiosResponse): Promise<Customer> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Customer.fromJS(resultData200);
            return Promise.resolve<Customer>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Customer>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    customerPUT(body: Customer | undefined , cancelToken?: CancelToken | undefined): Promise<Customer> {
        let url_ = this.baseUrl + "/api/Customer";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "PUT",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processCustomerPUT(_response);
        });
    }

    protected processCustomerPUT(response: AxiosResponse): Promise<Customer> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Customer.fromJS(resultData200);
            return Promise.resolve<Customer>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Customer>(null as any);
    }

    /**
     * @return Success
     */
    customerGET2(userId: string , cancelToken?: CancelToken | undefined): Promise<Customer> {
        let url_ = this.baseUrl + "/api/Customer/{userId}";
        if (userId === undefined || userId === null)
            throw new Error("The parameter 'userId' must be defined.");
        url_ = url_.replace("{userId}", encodeURIComponent("" + userId));
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processCustomerGET2(_response);
        });
    }

    protected processCustomerGET2(response: AxiosResponse): Promise<Customer> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Customer.fromJS(resultData200);
            return Promise.resolve<Customer>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Customer>(null as any);
    }

    /**
     * @return Success
     */
    customerDELETE(userId: string, customerCode: string , cancelToken?: CancelToken | undefined): Promise<Customer> {
        let url_ = this.baseUrl + "/api/Customer/{CustomerCode}";
        if (userId === undefined || userId === null)
            throw new Error("The parameter 'userId' must be defined.");
        url_ = url_.replace("{userId}", encodeURIComponent("" + userId));
        if (customerCode === undefined || customerCode === null)
            throw new Error("The parameter 'customerCode' must be defined.");
        url_ = url_.replace("{CustomerCode}", encodeURIComponent("" + customerCode));
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "DELETE",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processCustomerDELETE(_response);
        });
    }

    protected processCustomerDELETE(response: AxiosResponse): Promise<Customer> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Customer.fromJS(resultData200);
            return Promise.resolve<Customer>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Customer>(null as any);
    }

    /**
     * @return Success
     */
    productGET(  cancelToken?: CancelToken | undefined): Promise<ProductListResponse> {
        let url_ = this.baseUrl + "/api/Product";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processProductGET(_response);
        });
    }

    protected processProductGET(response: AxiosResponse): Promise<ProductListResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = ProductListResponse.fromJS(resultData200);
            return Promise.resolve<ProductListResponse>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ProductListResponse>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    productPOST(body: Product | undefined , cancelToken?: CancelToken | undefined): Promise<Product> {
        let url_ = this.baseUrl + "/api/Product";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processProductPOST(_response);
        });
    }

    protected processProductPOST(response: AxiosResponse): Promise<Product> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Product.fromJS(resultData200);
            return Promise.resolve<Product>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Product>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    productPUT(body: Product | undefined , cancelToken?: CancelToken | undefined): Promise<Product> {
        let url_ = this.baseUrl + "/api/Product";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "PUT",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processProductPUT(_response);
        });
    }

    protected processProductPUT(response: AxiosResponse): Promise<Product> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Product.fromJS(resultData200);
            return Promise.resolve<Product>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Product>(null as any);
    }

    /**
     * @return Success
     */
    productGET2(productCode: string , cancelToken?: CancelToken | undefined): Promise<Product> {
        let url_ = this.baseUrl + "/api/Product/{productCode}";
        if (productCode === undefined || productCode === null)
            throw new Error("The parameter 'productCode' must be defined.");
        url_ = url_.replace("{productCode}", encodeURIComponent("" + productCode));
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processProductGET2(_response);
        });
    }

    protected processProductGET2(response: AxiosResponse): Promise<Product> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Product.fromJS(resultData200);
            return Promise.resolve<Product>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Product>(null as any);
    }

    /**
     * @return Success
     */
    productDELETE(productCode: string , cancelToken?: CancelToken | undefined): Promise<Product> {
        let url_ = this.baseUrl + "/api/Product/{productCode}";
        if (productCode === undefined || productCode === null)
            throw new Error("The parameter 'productCode' must be defined.");
        url_ = url_.replace("{productCode}", encodeURIComponent("" + productCode));
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "DELETE",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processProductDELETE(_response);
        });
    }

    protected processProductDELETE(response: AxiosResponse): Promise<Product> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Product.fromJS(resultData200);
            return Promise.resolve<Product>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Product>(null as any);
    }
}

export class Customer implements ICustomer {
    id?: string | undefined;
    collectionId?: string | undefined;
    collectionName?: string | undefined;
    created?: string | undefined;
    updated?: string | undefined;
    nickname?: string | undefined;
    firstName?: string | undefined;
    lastName?: string | undefined;
    thumbnailUrl?: string | undefined;
    products?: Product[] | undefined;
    eCoins?: number;

    constructor(data?: ICustomer) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.collectionId = _data["collectionId"];
            this.collectionName = _data["collectionName"];
            this.created = _data["created"];
            this.updated = _data["updated"];
            this.nickname = _data["nickname"];
            this.firstName = _data["firstName"];
            this.lastName = _data["lastName"];
            this.thumbnailUrl = _data["thumbnailUrl"];
            if (Array.isArray(_data["products"])) {
                this.products = [] as any;
                for (let item of _data["products"])
                    this.products!.push(Product.fromJS(item));
            }
            this.eCoins = _data["eCoins"];
        }
    }

    static fromJS(data: any): Customer {
        data = typeof data === 'object' ? data : {};
        let result = new Customer();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["collectionId"] = this.collectionId;
        data["collectionName"] = this.collectionName;
        data["created"] = this.created;
        data["updated"] = this.updated;
        data["nickname"] = this.nickname;
        data["firstName"] = this.firstName;
        data["lastName"] = this.lastName;
        data["thumbnailUrl"] = this.thumbnailUrl;
        if (Array.isArray(this.products)) {
            data["products"] = [];
            for (let item of this.products)
                data["products"].push(item.toJSON());
        }
        data["eCoins"] = this.eCoins;
        return data;
    }
}

export interface ICustomer {
    id?: string | undefined;
    collectionId?: string | undefined;
    collectionName?: string | undefined;
    created?: string | undefined;
    updated?: string | undefined;
    nickname?: string | undefined;
    firstName?: string | undefined;
    lastName?: string | undefined;
    thumbnailUrl?: string | undefined;
    products?: Product[] | undefined;
    eCoins?: number;
}

export class CustomerListResponse implements ICustomerListResponse {
    page?: number;
    perPage?: number;
    totalItems?: number;
    items?: Customer[] | undefined;

    constructor(data?: ICustomerListResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.page = _data["page"];
            this.perPage = _data["perPage"];
            this.totalItems = _data["totalItems"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(Customer.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CustomerListResponse {
        data = typeof data === 'object' ? data : {};
        let result = new CustomerListResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["page"] = this.page;
        data["perPage"] = this.perPage;
        data["totalItems"] = this.totalItems;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data;
    }
}

export interface ICustomerListResponse {
    page?: number;
    perPage?: number;
    totalItems?: number;
    items?: Customer[] | undefined;
}

export class Product implements IProduct {
    id?: string | undefined;
    collectionId?: string | undefined;
    collectionName?: string | undefined;
    created?: string | undefined;
    updated?: string | undefined;
    title?: string | undefined;
    description?: string | undefined;
    cost?: number;
    availableAmount?: number;
    saleDiscount?: boolean;
    discountAvailable?: number;
    productContents?: ProductContent[] | undefined;
    imageUrl?: string | undefined;

    constructor(data?: IProduct) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.collectionId = _data["collectionId"];
            this.collectionName = _data["collectionName"];
            this.created = _data["created"];
            this.updated = _data["updated"];
            this.title = _data["title"];
            this.description = _data["description"];
            this.cost = _data["cost"];
            this.availableAmount = _data["availableAmount"];
            this.saleDiscount = _data["saleDiscount"];
            this.discountAvailable = _data["discountAvailable"];
            if (Array.isArray(_data["productContents"])) {
                this.productContents = [] as any;
                for (let item of _data["productContents"])
                    this.productContents!.push(ProductContent.fromJS(item));
            }
            this.imageUrl = _data["imageUrl"];
        }
    }

    static fromJS(data: any): Product {
        data = typeof data === 'object' ? data : {};
        let result = new Product();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["collectionId"] = this.collectionId;
        data["collectionName"] = this.collectionName;
        data["created"] = this.created;
        data["updated"] = this.updated;
        data["title"] = this.title;
        data["description"] = this.description;
        data["cost"] = this.cost;
        data["availableAmount"] = this.availableAmount;
        data["saleDiscount"] = this.saleDiscount;
        data["discountAvailable"] = this.discountAvailable;
        if (Array.isArray(this.productContents)) {
            data["productContents"] = [];
            for (let item of this.productContents)
                data["productContents"].push(item.toJSON());
        }
        data["imageUrl"] = this.imageUrl;
        return data;
    }
}

export interface IProduct {
    id?: string | undefined;
    collectionId?: string | undefined;
    collectionName?: string | undefined;
    created?: string | undefined;
    updated?: string | undefined;
    title?: string | undefined;
    description?: string | undefined;
    cost?: number;
    availableAmount?: number;
    saleDiscount?: boolean;
    discountAvailable?: number;
    productContents?: ProductContent[] | undefined;
    imageUrl?: string | undefined;
}

export class ProductContent implements IProductContent {
    contentName?: string | undefined;
    contentPercentage?: number;

    constructor(data?: IProductContent) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.contentName = _data["contentName"];
            this.contentPercentage = _data["contentPercentage"];
        }
    }

    static fromJS(data: any): ProductContent {
        data = typeof data === 'object' ? data : {};
        let result = new ProductContent();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["contentName"] = this.contentName;
        data["contentPercentage"] = this.contentPercentage;
        return data;
    }
}

export interface IProductContent {
    contentName?: string | undefined;
    contentPercentage?: number;
}

export class ProductListResponse implements IProductListResponse {
    page?: number;
    perPage?: number;
    totalItems?: number;
    items?: Product[] | undefined;

    constructor(data?: IProductListResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.page = _data["page"];
            this.perPage = _data["perPage"];
            this.totalItems = _data["totalItems"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(Product.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ProductListResponse {
        data = typeof data === 'object' ? data : {};
        let result = new ProductListResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["page"] = this.page;
        data["perPage"] = this.perPage;
        data["totalItems"] = this.totalItems;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data;
    }
}

export interface IProductListResponse {
    page?: number;
    perPage?: number;
    totalItems?: number;
    items?: Product[] | undefined;
}

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}

function isAxiosError(obj: any | undefined): obj is AxiosError {
    return obj && obj.isAxiosError === true;
}